-- Enable RLS
create extension if not exists "uuid-ossp";

-- Create tables with PostgreSQL syntax
CREATE TABLE IF NOT EXISTS cities (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS etablissements (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS types_concours (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS tarifications (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    tarif DECIMAL(10,2) NOT NULL,
    description TEXT,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS concours (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    etablissement_id BIGINT REFERENCES etablissements(id) ON DELETE CASCADE,
    start_datetime TIMESTAMP NOT NULL,
    end_datetime TIMESTAMP NOT NULL,
    threshold DOUBLE PRECISION NOT NULL,
    type_concours_id BIGINT REFERENCES types_concours(id),
    tarification_id BIGINT REFERENCES tarifications(id),
    choice_type VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS filieres (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    etablissement_id BIGINT REFERENCES etablissements(id) ON DELETE CASCADE,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS choices (
    id BIGSERIAL PRIMARY KEY,
    concours_id BIGINT REFERENCES concours(id) ON DELETE CASCADE,
    filiere_id BIGINT REFERENCES filieres(id) ON DELETE SET NULL,
    etablissement_id BIGINT REFERENCES etablissements(id) ON DELETE SET NULL,
    libelle VARCHAR(255) NOT NULL,
    available_seats INTEGER DEFAULT 0,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS concours_city (
    id BIGSERIAL PRIMARY KEY,
    concours_id BIGINT REFERENCES concours(id) ON DELETE CASCADE,
    city_id BIGINT REFERENCES cities(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS phases (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(255) UNIQUE NOT NULL,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS documents (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(255) UNIQUE NOT NULL,
    weight INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS concours_documents (
    id BIGSERIAL PRIMARY KEY,
    concours_id BIGINT REFERENCES concours(id) ON DELETE CASCADE,
    document_id BIGINT REFERENCES documents(id) ON DELETE CASCADE,
    phase_id BIGINT REFERENCES phases(id) ON DELETE CASCADE,
    required BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(concours_id, document_id, phase_id)
);

CREATE TABLE IF NOT EXISTS concours_phases (
    id BIGSERIAL PRIMARY KEY,
    concours_id BIGINT REFERENCES concours(id) ON DELETE CASCADE,
    phase_id BIGINT REFERENCES phases(id) ON DELETE CASCADE,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(concours_id, phase_id)
);

-- Enable Row Level Security (RLS)
ALTER TABLE cities ENABLE ROW LEVEL SECURITY;
ALTER TABLE etablissements ENABLE ROW LEVEL SECURITY;
ALTER TABLE types_concours ENABLE ROW LEVEL SECURITY;
ALTER TABLE tarifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE concours ENABLE ROW LEVEL SECURITY;
ALTER TABLE filieres ENABLE ROW LEVEL SECURITY;
ALTER TABLE choices ENABLE ROW LEVEL SECURITY;
ALTER TABLE concours_city ENABLE ROW LEVEL SECURITY;
ALTER TABLE phases ENABLE ROW LEVEL SECURITY;
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE concours_documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE concours_phases ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Enable read access for all users" ON cities FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON etablissements FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON types_concours FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON tarifications FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON concours FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON filieres FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON choices FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON concours_city FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON phases FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON documents FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON concours_documents FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON concours_phases FOR SELECT USING (true); 